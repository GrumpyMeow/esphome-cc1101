# https://github.com/dbuezas/esphome-cc1101
esphome:
  name: cc1101-example
  friendly_name: CC1101 example
  includes:
    - cc1101.h
  libraries:
    - SPI
    - "SmartRC-CC1101-Driver-Lib"

esp8266:
  board: d1_mini

#esp32:
#  board: esp32dev

wifi:
  ssid: !secret wifi_name
  password: !secret wifi_pass
  fast_connect: true
  power_save_mode: HIGH

logger:
  level: VERBOSE
api:
ota:

web_server:
  port: 80

number:
  - platform: template
    max_value: 812
    min_value: 58
    initial_value: 200
    step: 1
    mode: slider
    optimistic: true
    unit_of_measurement: "kHz"
    name: BW
    on_value:
      then:
        - lambda: get_cc1101(transceiver).setBW(x);
  - platform: template
    # Uncomment this section if your cc1101 board is tuned for ~320MHz
    # min_value: 300
    # max_value: 348
    # initial_value: 320

    # Uncomment this section if your cc1101 board is tuned for ~433MHz
    min_value: 378
    max_value: 464
    initial_value: 433

    # Uncomment this section if your cc1101 board is tuned for ~868MHz
    # min_value: 799
    # max_value: 928
    # initial_value: 868

    step: .001
    mode: box
    optimistic: true
    unit_of_measurement: "MHz"
    name: FREQ
    on_value:
      then:
        - lambda: get_cc1101(transceiver).setFreq(x);

sensor:
  - platform: custom
    lambda: |-
      auto my_sensor = new CC1101(

        // esp8266 configuration example
        D5, // SCK
        D6, // MISO
        D7, // MOSI
        D3, // CSN
        D1, // GDO0

        // esp32 configuration example
        // 18, // SCK
        // 19, // MISO
        // 23, // MOSI
        // 5,  // CSN
        // 32, // GDO0

        200, // bandwidth_in_khz
        433.92, // freq_in_mhz
        id(transmitter) // id of remote_transmitter
      );
      App.register_component(my_sensor);
      return {my_sensor};
    sensors:
      id: transceiver
      internal: true
remote_transmitter:
  - id: transmitter
    pin:
      number: D1 # ESP32: replace with "GPIO32"
      allow_other_uses: true
    carrier_duty_percent: 100%

remote_receiver:
  - id: receiver
    pin:
      number: D1 # ESP32: replace with "GPIO32"
      allow_other_uses: true
      # on the esp8266 use any of D1,D2,D5,D6,D7,Rx
      # Don't use D3,D4,D8,TX, boot often fails.
      # Can't be D0 or GPIO17 b/c no interrupts
    dump:
      - raw
binary_sensor:
  - platform: remote_receiver
    name: Garage
    raw:
      # prettier-ignore
      code: [990,-330,330,-990,990,-330,330,-990,330,-990,330,-990,330,-990,330,-990,330,-990,990,-330,330,-990,990,-330,330,-990,330,-990,330,-990,330,-990,330,-990,330,-990,990,-330,990,-330,330,-990,330,-990,990,-330,330,-990,330]
switch:
  - platform: template
    name: "RSSI"
    entity_category: diagnostic
    lambda: return get_cc1101(transceiver).rssi_on;
    turn_on_action:
      lambda: get_cc1101(transceiver).rssi_on = true;
    turn_off_action:
      lambda: get_cc1101(transceiver).rssi_on = false;

button:
  - platform: template
    name: Garage
    on_press:
      - lambda: get_cc1101(transceiver).beginTransmission();
      - remote_transmitter.transmit_raw:
          # prettier-ignore
          code: [990,-330,330,-990,990,-330,330,-990,330,-990,330,-990,330,-990,330,-990,330,-990,990,-330,330,-990,990,-330,330,-990,330,-990,330,-990,330,-990,330,-990,330,-990,990,-330,990,-330,330,-990,330,-990,990,-330,330,-990,330]
          repeat:
            times: 3
            wait_time: 4.733ms
      - lambda: get_cc1101(transceiver).endTransmission();
